<!--
 * =====================================================================
 *   This Ant script helps you preparing for building the iSphere
 *   update site. Before you can run the script, you need to copy
 *   'template_ftp.properties' to 'ftp.properties' and change the
 *   properties to meet your needs.
 *
 *   In order to use all features of the script, you need to
 *   have the 'iSphere Ant Plugin' installed.
 *
 *   The main switches to control the build process are:
 *
 *     build.files.enabled - specifies whether to build the plug-in
 *     build.web.enabled   - specifies whether to build the update site html file
 *     build.help.enabled  - specifies whether to build the iSphere help pages
 *     build.dryrun        - specifies whether to apply changes to SourceForge
 *
 *   See also: build.properties
 *
 *   Here are the steps to create an iSphere update site:
 *
 *     - On the PC run the 'CheckNLSMessages' JUnit test to check
 *       for missing or obsolete message property entries.
 *
 *     - On the PC change version number in COPYRIGHT.RPGLE.
 *     - On the PC push changes of project 'iSphere' to the AS/400.
 *     - On the AS/400 compile and execute command BUILD.
 *     - On the PC update minimum server version number in iSpherePlugin.
 *
 *     - On the PC search java sources for missing copyright header.
 *       Menu: Search -> File -> (?s)\A((?!copyright).)*\Z
 *             Check: Regular expression
 *     - On the PC update document iSphere.doc.
 *     - On the PC set version number (build.version) in build.properties and the
 *       propertes for selecting what to build according to your needs.
 *       (version number is automatically updated in MANIFEST.MF, feature.xml 
 *        and plugin.xml by build target 'updateVersionNumber'.)
 *
 *        build.version
 *        build.files.enabled
 *        build.web.enabled
 *        build.help.enabled
 *
 *   Repeat for RDi and WDSC:
 *     - On the PC run target 'downloadISphereLibrary'.
 *     - On the PC run target 'build' using lauch for RDP or WDSC.
 *     - On the PC right click 'site.xml', 
 *       select 'PDE Tools' -> 'Build Site'.
 *     - On the PC run target 'createSourceForgeFiles'.
 *     - On the PC run target 'uploadSourceForgeFiles'.
 *     - Check files on SourceForge.
 *     - Check the green "Download" button on SourceForge.
 *     - Create SVN tag.
 *   Last step when all changes are committed to the repository and all the
 *   files are published at sourceforge.
 *     - Set the version number in MANIFEST.MF in project "iSphere Notifier"
 *       and commit the change to the repository. After this the iSphere users
 *       get notified of the new iSphere version.
 *
 * ===================================================================== -->
<project basedir="." default="build">

	<!-- Include Ant Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${basedir}/../lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Load project names and new version number -->
	<property file="build.properties" />

	<!-- Load ftp user name and password -->
	<property file="ftp.properties" />

	<!-- Load properties for local update site -->
	<property file="localUpdateSite.properties" />

	<!-- Set date and time -->
	<tstamp>
		<format property="today.timestamp" pattern="dd.MM.yyyy - kk:mm:ss" locale="de,DE" />
	</tstamp>

	<tstamp>
		<format property="today.year" pattern="yyyy" locale="de,DE" />
	</tstamp>

	<!-- Set regular expressions and replacement values -->
	<property name="validate.version.regex" value="^([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|r))?)$" />
	<property name="release.flag.regex" value="^(?:[1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{3}|(r)))?)$" />

	<property name="manifest.version.regex" value="(Bundle-Version:\s)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)" />
	<property name="manifest.version.replace" value="\1${build.version}" />

	<property name="feature.1.version.regex" value="(&lt;feature.*version=&quot;)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+provider-name.*?&gt;)" />
	<property name="feature.1.version.replace" value="\1${build.version}\3" />

	<property name="feature.2.version.regex" value="(&lt;import feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;\s+match.*?&gt;)" />
	<property name="feature.2.version.replace" value="\1${build.version}\3" />

	<property name="site.1.version.regex" value="(&lt;feature.*_)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(\.jar)" />
	<property name="site.1.version.replace" value="\1${build.version}\3" />

	<property name="site.2.version.regex" value="(&lt;feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(&quot;)" />
	<property name="site.2.version.replace" value="\1${build.version}\3" />

	<property name="copyright.1.version.regex" value="^(Version: )([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.(?:b[0-9]{1,3}|r))?)(.*)?" />
	<property name="copyright.1.version.replace" value="\1${build.version}\3" />

	<!-- Check for BETA or RELEASE version -->
	<propertyregex property="release.flag" input="${build.version}" regexp="${release.flag.regex}" select="\1" casesensitive="true" />
	<if>
		<equals arg1="${release.flag}" arg2="r" />
		<then>
			<echo>Building a RELEASE version.</echo>
			<property name="is.beta.version" value="false" />
			<property name="beta.dir" value="." />
			<property name="version.info" value="&lt;div class=&quot;release&quot;&gt;Release Version - ${build.version}&lt;/div&gt;" />
		</then>
		<else>
			<echo>Building a BETA version.</echo>
			<property name="is.beta.version" value="true" />
			<property name="beta.dir" value="${sf.ftp.beta.dir.name}" />
			<property name="version.info" value="&lt;div class=&quot;beta&quot;&gt;Beta Version - ${build.version}&lt;/div&gt;" />
		</else>
	</if>

	<!-- Set workspace home directory -->
	<property name="workspace.home" location="${basedir}/../.." />

	<!-- Set build home directory -->
	<property name="build.home" location="${basedir}" />

	<!-- Set the iSphere home at SourceForge -->
	<property name="isphere.home" value="https://sourceforge.net/projects/isphere/" />
	
	<!-- Set the home of the iSphere help pages -->
	<property name="isphere.help" value="http://isphere.sourceforge.net/help/" />

	<!-- Set local FTP properties -->
	<property name="local.download.directory" location="${basedir}/temp-downloads" />
	<property name="local.savefile.name" value="ISPHERE.SAVF" />
	<property name="local.savefile.directory" location="${basedir}/../../${build.project.isphere.core}/Server" />

	<!-- Set remote FTP properties (SourceForge) -->
	<property name="sf.dir.updatesite.web.root" value="/home/project-web/isphere/htdocs/${beta.dir}/eclipse/" />
	<property name="sf.dir.updatesite.files.root" value="/home/pfs/project/isphere/${beta.dir}/" />
	<property name="sf.dir.updatesite.help.root" value="/home/project-web/isphere/htdocs/${beta.dir}/" />
	<property name="sf.dir.updatesite.help.dir" value="help" />
	<property name="sf.dir.updatesite.home.root" value="/home/project-web/isphere/htdocs/" />
	<property name="sf.dir.updatesite.home.dir" value="." />

	<!-- Set zip file and directory names -->
	<property name="build.template.dir" location="${build.home}/templates" />
	<property name="build.template.dir.maintenance" location="${build.template.dir}/template_maintenance" />
	<property name="build.template.dir.web" location="${build.template.dir}/template_updatesite_web" />
	<property name="build.template.dir.files" location="${build.template.dir}/template_no_beta_version" />
	<property name="build.upload.dir" location="${workspace.home}/${build.project.name}/upload" />
	<property name="build.upload.dir.maintenance" location="${build.upload.dir}/sf-maintenance/${beta.dir}/maintenance" />
	<property name="build.upload.dir.files" location="${build.upload.dir}/sf-files/${beta.dir}" />
	<property name="build.upload.dir.files.eclipse" location="${build.upload.dir}/sf-files/${beta.dir}/eclipse" />
	<property name="build.upload.dir.web" location="${build.upload.dir}/sf-web/${beta.dir}" />
	<property name="build.upload.dir.web.eclipse" location="${build.upload.dir}/sf-web/${beta.dir}/eclipse" />
	<property name="build.upload.dir.help" location="${build.upload.dir}/sf-help/${beta.dir}/help" />
	<property name="build.upload.dir.home" location="${build.upload.dir}/sf-home/" />
	<property name="zip.base.directory" location="${workspace.home}/${build.updatesite}" />
	<property name="isphere.doc" location="${workspace.home}/${build.project.isphere.core}/doc/iSphere.doc" />
	<property name="isphere.pdf" location="${workspace.home}/${build.project.isphere.core}/doc/iSphere for WDSCi 7.0-RDi 8.0+.pdf" />
	<property name="updatesite.tag.file" location="${workspace.home}\${build.updatesite}\${build.updatesite} v${build.version}.tag" />

	<fileset dir="${build.home}" id="build.changelog.files">
		<include name="Changelog iSphere*.txt" />
	</fileset>

	<!-- Set build target dependant parameters -->
	<property name="target.ide.product.name.short.rdi" value="RDi 8.0+" />
	<property name="target.ide.product.name.short.wdsci" value="WDSCi 7.0" />
	<property name="target.ide.product.name.long.rdi" value="IBM Rational Developer for i" />
	<property name="target.ide.product.name.long.wdsci" value="Websphere Development Studio Client for iSeries" />
	<property name="target.ide.rdi" value="rdi8.0" />
	<property name="target.ide.wdsci" value="wdsci7.0" />
	
	<if>
		<equals arg1="${build.target}" arg2="RDi" />
		<then>
			<property name="target.ide.ide.product.name.long" value="${target.ide.product.name.long.rdi}" />
			<property name="target.ide.ide.product.name.short" value="${target.ide.product.name.short.rdi}" />
			<property name="target.ide.sf.dir" value="${target.ide.rdi}" />
			<property name="target.ide.exclude.site.xml" value="site.xml" />
			<property name="target.ide.exclude.web.files" value="**/wdsci*.*" />
			<property name="target.ide.exclude.download.files" value="*wdsci*"/>
		</then>
		<else>
			<property name="target.ide.ide.product.name.long" value="${target.ide.product.name.long.wdsci}" />
			<property name="target.ide.ide.product.name.short" value="${target.ide.product.name.short.wdsci}" />
			<property name="target.ide.sf.dir" value="${target.ide.wdsci}" />
			<property name="target.ide.exclude.site.xml" value="" />
			<property name="target.ide.exclude.web.files" value="**/rdi*.*" />
			<property name="target.ide.exclude.download.files" value="*rdi*"/>
		</else>
	</if>

	<property name="target.ide.zip.file.name" value="iSphere for ${target.ide.ide.product.name.short} (v${build.version} Update Site).zip" />

	<if>
		<equals arg1="${is.beta.version}" arg2="true" />
		<then>
			<property name="target.ide.update.site.url" value="http://isphere.sourceforge.net/${beta.dir}/eclipse/${target.ide.sf.dir}/" />
			<property name="target.ide.help.site.url" value="http://isphere.sourceforge.net/${beta.dir}/${sf.dir.updatesite.help.dir}/" />
		</then>
		<else>
			<property name="target.ide.update.site.url" value="http://isphere.sourceforge.net/eclipse/${target.ide.sf.dir}/" />
			<property name="target.ide.help.site.url" value="http://isphere.sourceforge.net/${sf.dir.updatesite.help.dir}/" />
		</else>
	</if>

	<!-- Check what shall be build -->
	<if>
		<equals arg1="${build.files.enabled}" arg2="true" />
		<then>
			<!-- build files for download area -->
			<echo>Building iSphere download files ...</echo>
		</then>
		<else>
			<property name="ignore.build.files" value="true" />
			<echo>IGNORED: iSphere Download Files</echo>
		</else>
	</if>

	<if>
		<equals arg1="${build.web.enabled}" arg2="true" />
		<then>
			<!-- build files of update site -->
			<echo>Building web pages of iSphere update site ...</echo>
		</then>
		<else>
			<property name="ignore.build.web" value="true" />
			<echo>IGNORED: iSphere Update Site</echo>
		</else>
	</if>

	<if>
		<equals arg1="${build.help.enabled}" arg2="true" />
		<then>
			<!-- build help pages -->
			<echo>Building iSphere help web pages ...</echo>
		</then>
		<else>
			<property name="ignore.build.help" value="true" />
			<echo>IGNORED: iSphere Help</echo>
		</else>
	</if>

	<if>
		<equals arg1="${build.home.enabled}" arg2="true" />
		<then>
			<!-- build iSphere home page -->
			<if>
				<equals arg1="${is.beta.version}" arg2="false" />
				<then>
					<echo>Building iSphere help home page ...</echo>
				</then>
				<else>
					<property name="ignore.build.home" value="true" />
					<echo>IGNORED: iSphere Home Page (due to beta version number)</echo>
				</else>
			</if>
		</then>
		<else>
			<property name="ignore.build.home" value="true" />
			<echo>IGNORED: iSphere Home Page</echo>
		</else>
	</if>

	<if>
		<or>
			<equals arg1="${build.web.enabled}" arg2="true" />
			<equals arg1="${build.help.enabled}" arg2="true" />
			<equals arg1="${build.home.enabled}" arg2="true" />
		</or>
		<then>
			<!-- build files of update site -->
			<echo>Building 'maintenance' web page ...</echo>
		</then>
		<else>
			<property name="ignore.build.maintenance" value="true" />
			<echo>IGNORED: iSphere 'maintenance' web page</echo>
		</else>
	</if>


	<!--
    * =====================================================================
    *   Downloads library ISPHERE from the System i.
    *   This target requires a patched version of commons-net-3.3.jar
    *   where bug NET-512 has been fixed.
    *   (https://issues.apache.org/jira/browse/NET-512)
    * ===================================================================== -->
	<target name="downloadISphereLibrary" depends="ftpCredentialsIBMi" description="Download iSphere library from IBM i">

		<echo>Downloading save file ${ftp.savefile.name} ...</echo>

		<ftp action="get" server="${IBMi.ftp.server}" userid="${IBMi.ftp.user}" password="${IBMi.ftp.password}" binary="true" verbose="true" remotedir="${IBMi.ftp.savefile.library}" systemTypeKey="OS/400">
			<fileset dir="${local.download.directory}" casesensitive="false">
				<include name="${ftp.savefile.name}" />
			</fileset>
		</ftp>

		<move file="${local.download.directory}/${ftp.savefile.name}" tofile="${local.savefile.directory}/${local.savefile.name}" overwrite="true" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />
		<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Main build procedure. Cleans folders, updates the version number
    *   and creates the version tag file.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
	<target name="build" depends="cleanUpdateSite, cleanUploadDir, updateVersionNumber, updateStylesheets, createTagFile, refreshProjects" description="Build iSphere SourceForge Site">

		<echo>+------------------------------------------------------+</echo>
		<echo>+  Finished iSphere build ${build.version}             |</echo>
		<echo>|                                                      |</echo>
		<echo>|  Right-click 'site.xml' and select 'PDE Tools' ->    |</echo>
		<echo>|  'Build Site' to build the update site.              |</echo>
		<echo>|                                                      |</echo>
		<echo>|  Then proceed with:   createSourceForgeFiles         |</echo>
		<echo>|                       uploadSourceForgeFiles         |</echo>
		<echo>+------------------------------------------------------+</echo>
		<echo>*** Finished ***</echo>

	</target>

	<!--
    * =====================================================================
    *   Produces the files that must be uploaded to SourceForge.
    *   This target creates all files that must be uploaded to SourceForge.
    *   It must be run, after the update site has been built.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
	<target name="createSourceForgeFiles" depends="cleanUploadDir,checkPdfFile,updatePdfFile,createSourceForgeDownloadFiles,createSourceForgeWebPages,createSourceForgeHelp,createSourceForgeHome,createSourceForgeMaintenance" description="Create SourceForge files and web pages">

		<echo>+------------------------------------------------------+</echo>
		<echo>|  Check files in 'iSphere Build/upload/...'           |</echo>
		<echo>|                                                      |</echo>
		<echo>|  Then proceed with:   uploadSourceForgeFiles         |</echo>
		<echo>+------------------------------------------------------+</echo>
		<echo>*** Finished ***</echo>

	</target>

	<!--
    * =====================================================================
    *   Uploads the entire project files to SourceForge.
    *   This target must be run, after the SourceForge files have been built.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
	<target name="uploadSourceForgeFiles" depends="ftpCredentialsSourceForge" description="Uploads the entire project to SourceForge">

		<echo>Uploading files to SourceForge ...</echo>

		<antcall target="cleanSourceForgeDownloadFiles" />

		<antcall target="cleanSourceForgeWebPages" />

		<antcall target="cleanSourceForgeHelp" />

		<antcall target="cleanSourceForgeHome" />

		<antcall target="uploadSourceForgeDownloadFiles" />

		<antcall target="uploadSourceForgeWebPages" />

		<antcall target="uploadSourceForgeHelp" />

		<antcall target="uploadSourceForgeHome" />

	</target>

	<!--
    * =====================================================================
    *   Create a local update site for your company.
    *   This target must be run, after the SourceForge files have been built.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    * ===================================================================== -->
	<target name="uploadLocalUpdateSite" description="Copies the update site to a local directory" >

		<if>
			<equals arg1="${local.updateSite.enabled}" arg2="true" />
			<then>
				
				<echo>Creating local update site ...</echo>
				
				<antcall target="cleanLocalUpdateSite" />
				
				<antcall target="uploadLocalUpdateSiteDownloadFiles" />
			</then>	
		</if>
			
	</target>

	<!--
    * =====================================================================
    *   Sets the properties that are used for building your local
    *   update site.
    *   This target uses the properties stored in 
    *   'localUpdateSite.properties'.
    * ===================================================================== -->
	<target name="setLocalUpdateSiteProperties" >
		
		<if>
			<equals arg1="${is.beta.version}" arg2="true" />
			<then>
				<property name="local.updateSite.path" value="${local.updateSite.beta.path}" />
			</then>
			<else>
				<property name="local.updateSite.path" value="${local.updateSite.release.path}" />
			</else>
		</if>
		
	</target>

	<!--
    * =====================================================================
    *   Removes all generated files from the local 
    *   'iSphere Update Site' folder. This target is indented to be called
    *   before the update site is build from the context menu of the
    *   'iSphere Update Site' project.
    * ===================================================================== -->
	<target name="cleanUpdateSite">

		<echo>Removing old files from '${build.updatesite}' ...</echo>

		<delete includeemptydirs="true">
			<fileset dir="${workspace.home}\${build.updatesite}\features" includes="**/*" />
			<fileset dir="${workspace.home}\${build.updatesite}\plugins" includes="**/*" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="artifacts.jar" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="content.jar" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="*.tag" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="logs.zip" />
		</delete>

		<eclipse.refreshLocal resource="${build.updatesite}" depth="infinite" />

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Removes all files from the local 'upload' directory.
    *   This target is intended to be called before any build is done. 
    * ===================================================================== -->
	<target name="cleanUploadDir">

		<echo>Cleaning upload directory ...</echo>

		<delete includeemptydirs="true">
			<fileset dir="${workspace.home}\${build.project.name}\upload" includes="**/*" />
		</delete>

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Removes all files from the local update site folders of
    *   your company.
    * ===================================================================== -->
	<target name="cleanLocalUpdateSite" depends="setLocalUpdateSiteProperties">

		<echo>Cleaning local update Site '${local.updateSite.path}' ...</echo>

		<delete includeemptydirs="true">
			<fileset dir="${local.updateSite.path}" includes="**/*" />
		</delete>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Creates the files of the iSphere download area on SourceForge.
    *   This target creates the files, that go to the SourceForge
    *   download area.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    *   This target is intended to be called only from the 'build' target.
    *
    *   Set the build properties as shown below, if you want to update the
    *   download area only:
    * 
    *     build.files.enabled=true
    *     build.web.enabled=false
    *     build.help.enabled=false
    * ===================================================================== -->
	<target name="createSourceForgeDownloadFiles" unless="ignore.build.files">

		<echo>Creating SourceForge download folders ...</echo>

		<echo>Preparing directory structure ...</echo>
		<mkdir dir="${build.upload.dir.files}" />
		<mkdir dir="${build.upload.dir.files}/eclipse" />
		<mkdir dir="${build.upload.dir.files}/eclipse/${target.ide.sf.dir}" />

		<echo>Copying zip and pdf files ...</echo>
		<zip basedir="${zip.base.directory}" destfile="${build.upload.dir.files}\${target.ide.zip.file.name}">
			<include name="**/*" />
			<exclude name="**/.project" />
		</zip>
		<copy file="${isphere.pdf}" todir="${build.upload.dir.files}" />

		<echo>Copying Eclipse update site files ...</echo>
		<copy todir="${build.upload.dir.files.eclipse}\${target.ide.sf.dir}">
			<fileset dir="${workspace.home}\${build.updatesite}">
				<exclude name="*.log" />
				<exclude name="${target.ide.exclude.site.xml}" />
				<exclude name=".project" />
			</fileset>
		</copy>

		<echo>Copying release/beta version dependant files ...</echo>
		<if>
			<equals arg1="${is.beta.version}" arg2="true" />
			<then>
				<echo>Copying "Changelog iSphere.txt" ...</echo>
				<copy todir="${build.upload.dir.files}">
					<fileset refid="build.changelog.files" />
				</copy>
			</then>
			<else>
				<echo>Copying "Not yet available.txt" ...</echo>
				<copy todir="${build.upload.dir.files}">
					<fileset dir="${build.template.dir.files}" />
				</copy>
			</else>
		</if>

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Copies the iSphere update site files to your local update site.
    *   Also copies MANIFEST.MF of the 'iSphere Notifier' project to
    *   your local update site to inform your colleagues about the new
    *   iSphere version.
    * ===================================================================== -->
	<target name="uploadLocalUpdateSiteDownloadFiles" depends="setLocalUpdateSiteProperties">

		<echo>Copying files to local update Site '${local.updateSite.path}' ...</echo>

		<copy todir="${local.updateSite.path}">
			<fileset dir="${build.upload.dir.files.eclipse}\${target.ide.sf.dir}">
			</fileset>
		</copy>

		<copy todir="${local.updateSite.path}">
			<fileset file="${workspace.home}\${build.notifier.project}\${build.notifier.file}" >
			</fileset>
		</copy>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Create the web pages of the iSphere update site.
    *   This target creates the html page and the .htaccess file that
    *   go to the iSphere update site.
    *   This target is specific to RDi/WDSCi and controlled by build.target.
    *
    *   Set the build properties as shown below, if you want to update 
    *   index.html and .htaccess only:
    * 
    *     build.files.enabled=false
    *     build.web.enabled=true
    *     build.help.enabled=false
    *
    *   You can also update the update site like this:
    *     cleanUploadDir
    *     createSourceForgeWebPages
    *     cleanSourceForgeWebPages
    *     uploadSourceForgeWebPages
    * ===================================================================== -->
	<target name="createSourceForgeWebPages" unless="ignore.build.web">

		<echo>Creating Eclipse web folders ...</echo>

		<echo>Preparing directory structure ...</echo>
		<mkdir dir="${build.upload.dir.web}" />

		<echo>Copying templates directory ...</echo>
		<copy todir="${build.upload.dir.web}">
			<fileset dir="${build.template.dir.web}">
				<exclude name="${target.ide.exclude.web.files}" />
			</fileset>
		</copy>

		<echo>Renaming ${target.ide.sf.dir} ...</echo>
		<move todir="${build.upload.dir.web.eclipse}\${target.ide.sf.dir}">
			<fileset dir="${build.upload.dir.web.eclipse}\build_target" />
		</move>

		<echo>Renaming index.html ...</echo>
		<move file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\${build.target}_index.html" tofile="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" />

		<echo>Renaming .htaccess ...</echo>
		<move file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\_htaccess" tofile="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\.htaccess" />

		<echo>Replacing '@' variables ...</echo>

		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\.htaccess" token="@BUILD_TARGET@" value="${target.ide.sf.dir}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\.htaccess" token="@BETA_VERSION@" value="${beta.dir}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\.htaccess" token="/./" value="/" />

		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@VERSION_INFO@" value="${version.info}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@IDE_PRODUCT_NAME_LONG@" value="${target.ide.ide.product.name.long}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@IDE_PRODUCT_NAME_SHORT@" value="${target.ide.ide.product.name.short}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@UPDATE_SITE_URL@" value="${target.ide.update.site.url}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@HELP_SITE_URL@" value="${target.ide.help.site.url}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@YEAR@" value="${today.year}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@VERSION_NUMBER@" value="${build.version}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@ISPHERE_HOME@" value="${isphere.home}" />
		<replace file="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}\index.html" token="@ISPHERE_HELP@" value="${isphere.help}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Creates the iSphere help pages.
    *   This target call the build script of the 'iSphere Help Builder'
    *   project to create the web folder.
    *   This target creates the html help pages that go to the iSphere 
    *   web folder.
    *   This target is not specific to RDi/WDSCi. It does not matter for 
    *   what target it is called.
    *
    *   Set the build properties as shown below, if you want to update 
    *   index.html and .htaccess only:
    * 
    *     build.files.enabled=false
    *     build.web.enabled=false
    *     build.help.enabled=true
    *
    *   You can also update the help pages like this:
    *     cleanUploadDir
    *     createSourceForgeHelpPages
    *     cleanSourceForgeHelpPages
    *     uploadSourceForgeHelpPages
    * ===================================================================== -->
	<target name="createSourceForgeHelp" unless="ignore.build.help">

		<echo>Creating iSphere help ...</echo>

		<ant inheritAll="false" inheritrefs="false" antfile="${workspace.home}/${build.help.builder}/build/build.xml" target="build">
		</ant>

		<copy todir="${build.upload.dir.help}">
			<fileset dir="${workspace.home}/${build.help.builder}/upload" />
		</copy>

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Creates the iSphere home page.
    * ===================================================================== -->
	<target name="createSourceForgeHome" unless="ignore.build.home">

		<echo>Creating iSphere home page ...</echo>

		<copy todir="${build.upload.dir.home}">
			<fileset dir="${workspace.home}/${build.homepage.project}/html" />
		</copy>
		
		<replace file="${build.upload.dir.home}/index.html" token="@VERSION_INFO@" value="${version.info}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TODAY@" value="${today.timestamp}" />
		<replace file="${build.upload.dir.home}/index.html" token="@YEAR@" value="${today.year}" />
		<replace file="${build.upload.dir.home}/index.html" token="@VERSION_NUMBER@" value="${build.version}" />
		<replace file="${build.upload.dir.home}/index.html" token="@ISPHERE_HOME@" value="${isphere.home}" />
		<replace file="${build.upload.dir.home}/index.html" token="@ISPHERE_HELP@" value="${isphere.help}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_RDI@" value="${target.ide.rdi}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_WDSCI@" value="${target.ide.wdsci}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_PRODUCT_NAME_LONG_RDI@" value="${target.ide.product.name.long.rdi}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_PRODUCT_NAME_LONG_WDSCI@" value="${target.ide.product.name.long.wdsci}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_PRODUCT_NAME_SHORT_RDI@" value="${target.ide.product.name.short.rdi}" />
		<replace file="${build.upload.dir.home}/index.html" token="@TARGET_IDE_PRODUCT_NAME_SHORT_WDSCI@" value="${target.ide.product.name.short.wdsci}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Creates the iSphere maintenance page.
    * ===================================================================== -->
	<target name="createSourceForgeMaintenance" unless="ignore.build.maintenance">

		<echo>Creating iSphere maintenance web page ...</echo>

		<copy todir="${build.upload.dir.maintenance}">
			<fileset dir="${build.template.dir.maintenance}" />
		</copy>
		
		<replace file="${build.upload.dir.maintenance}/index.html" token="@ISPHERE_HOME@" value="${isphere.home}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Cleans the iSphere download area on SourceForge.
    * ===================================================================== -->
	<target name="cleanSourceForgeDownloadFiles" depends="ftpCredentialsSourceForge" unless="ignore.build.files">

		<echo>Deleting SourceForge: files (download area) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.files}" remoteDir="${sf.dir.updatesite.files.root}">
			<Rmdir dir="." subDirs="false" >
				<IgnoreFile pattern="${target.ide.exclude.download.files}.zip" ignoreCase="true" />
			</Rmdir>
			<Rmdir dir="./eclipse/${target.ide.sf.dir}" subDirs="true" />
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Cleans the iSphere update site web folder on SourceForge.
    * ===================================================================== -->
	<target name="cleanSourceForgeWebPages" depends="ftpCredentialsSourceForge" unless="ignore.build.web">

		<echo>Deleting: web pages (update site) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.web}" remoteDir="${sf.dir.updatesite.web.root}">
			<copydir dir="${build.upload.dir.maintenance}" toDir="./${target.ide.sf.dir}" subDirs="true" />
			<Rmdir dir="./${target.ide.sf.dir}" subDirs="true" >
				<IgnoreFile pattern="*/index.html" ignoreCase="true" />
				<IgnoreFile pattern="*/maintenance-assets/*" ignoreCase="true" />
			</Rmdir>
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Cleans the iSphere help pages web folder on SourceForge.
    * ===================================================================== -->
	<target name="cleanSourceForgeHelp" depends="ftpCredentialsSourceForge" unless="ignore.build.help">

		<echo>Deleting SourceForge: web pages (help) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.help}" remoteDir="${sf.dir.updatesite.help.root}">
			<copydir dir="${build.upload.dir.maintenance}" toDir="./${sf.dir.updatesite.help.dir}" subDirs="true" />
			<Rmdir dir="./${sf.dir.updatesite.help.dir}" subDirs="true" >
				<IgnoreFile pattern="*/index.html" ignoreCase="true" />
				<IgnoreFile pattern="*/maintenance-assets/*" ignoreCase="true" />
			</Rmdir>
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Cleans the iSphere home page web folder on SourceForge.
    * ===================================================================== -->
	<target name="cleanSourceForgeHome" depends="ftpCredentialsSourceForge" unless="ignore.build.home">

		<echo>Deleting SourceForge: web pages (help) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.home}" remoteDir="${sf.dir.updatesite.home.root}">
			<copydir dir="${build.upload.dir.maintenance}" toDir="./${sf.dir.updatesite.home.dir}" subDirs="true" />
			<Rmdir dir="./${sf.dir.updatesite.home.dir}" subDirs="false" >
				<IgnoreFile pattern="*/index.html" ignoreCase="true" />
				<IgnoreFile pattern="*/maintenance-assets/*" ignoreCase="true" />
			</Rmdir>
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Uploads the iSphere files to the SourceForge download area.
    * ===================================================================== -->
	<target name="uploadSourceForgeDownloadFiles" depends="ftpCredentialsSourceForge" unless="ignore.build.files">

		<echo>Uploading SourceForge: files (download area) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.files}" remoteDir="${sf.dir.updatesite.files.root}">
			<copydir dir="${build.upload.dir.files}" toDir="." subDirs="false" />
			<copydir dir="${build.upload.dir.files.eclipse}\${target.ide.sf.dir}" toDir="./eclipse/${target.ide.sf.dir}" subDirs="true" />
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Uploads the iSphere web pages of the Eclipse update site 
    *   to the SourceForge web folder.
    * ===================================================================== -->
	<target name="uploadSourceForgeWebPages" depends="ftpCredentialsSourceForge" unless="ignore.build.web">

		<echo>Uploading: web pages (update site) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.web}" remoteDir="${sf.dir.updatesite.web.root}">
			<copydir dir="${build.upload.dir.web.eclipse}/${target.ide.sf.dir}" toDir="./${target.ide.sf.dir}" subDirs="true" />
			<Rmdir dir="./${target.ide.sf.dir}/maintenance-assets" subDirs="true" />
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Uploads the iSphere help pages to the SourceForge web folder.
    * ===================================================================== -->
	<target name="uploadSourceForgeHelp" depends="ftpCredentialsSourceForge" unless="ignore.build.help">

		<echo>Uploading SourceForge: web pages (help) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.help}" remoteDir="${sf.dir.updatesite.help.root}">
			<copydir dir="${build.upload.dir.help}" toDir="./${sf.dir.updatesite.help.dir}" subDirs="true" />
			<Rmdir dir="./${sf.dir.updatesite.help.dir}/maintenance-assets" subDirs="true" />
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Uploads the iSphere home page to the SourceForge web folder.
    * ===================================================================== -->
	<target name="uploadSourceForgeHome" depends="ftpCredentialsSourceForge" unless="ignore.build.home">

		<echo>Uploading SourceForge: web pages (home) ...</echo>

		<SF user="${sf.ftp.user},${sf.ftp.project}" password="${sf.ftp.password}" trust="true" dryrun="${build.dryrun}" 
			host="${sf.ftp.server.home}" remoteDir="${sf.dir.updatesite.home.root}">
			<copydir dir="${build.upload.dir.home}" toDir="./${sf.dir.updatesite.home.dir}" subDirs="true" />
			<Rmdir dir="./${sf.dir.updatesite.home.dir}/maintenance-assets" subDirs="true" />
		</SF>

	</target>

	<!--
    * =====================================================================
    *   Creates the tag file to indicate the iSphere version 
    *   of the zip file.
    * ===================================================================== -->
	<target name="createTagFile">

		<echo>Creating version tag file ${updatesite.tag.file} ...</echo>

		<touch file="${updatesite.tag.file}" />

	</target>

	<!--
    * =====================================================================
    *   Checks whether the PDF file is up to date.
    * ===================================================================== -->
	<target name="checkPdfFile">

		<if>
			<equals arg1="${build.files.enabled}" arg2="true" />
			<then>
				<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />
		
				<uptodate property="pdf.isUpToDate" srcfile="${isphere.doc}" targetfile="${isphere.pdf}" />
		
				<echo>Check iSphere PDF result: ${pdf.isUpToDate}</echo>
			</then>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Updates the PDF file from 'iSphere.doc'.
    * ===================================================================== -->
	<target name="updatePdfFile" unless="pdf.isUpToDate">
		
		<if>
			<equals arg1="${build.files.enabled}" arg2="true" />
			<then>
				<echo>Updating iSphere PDF file ...</echo>
		
				<winword file="${isphere.doc}" visible="true">
					<saveAs toFile="${isphere.pdf}" saveFormat="pdf" />
				</winword>

				<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />
			</then>
		</if>
				
	</target>

	<!--
    * =====================================================================
    *   Validates the version number to ensure, that it matches
    *   the required format.
    * ===================================================================== -->
	<target name="validateVersionNumber">

		<echo>Validating version number to: ${build.version} ...</echo>

		<propertyregex property="validated.version" input="${build.version}" regexp="${validate.version.regex}" select="\1" casesensitive="true" />

		<if>
			<equals arg1="${build.version}" arg2="${validated.version}" />
			<then>
				<echo>Version number validated: OK</echo>
			</then>
			<else>
				<echo>+------------------------------------------------------+</echo>
				<echo>| Version number does not match expected pattern!      |</echo>
				<echo>|                                                      |</echo>
				<echo>| Pattern:                                             |</echo>
				<echo>| major.minor.micro.qualifier                          |</echo>
				<echo>|                                                      |</echo>
				<echo>| major - major version number (requested)             |</echo>
				<echo>| minor - minor version number (recommended)           |</echo>
				<echo>| micro - micro version number (optional)              |</echo>
				<echo>|                                                      |</echo>
				<echo>| The possible qualifiers are:                         |</echo>
				<echo>| r     - release version                              |</echo>
				<echo>| bnnn  - beta version, where nnn between 001 and 999  |</echo>
				<echo>+------------------------------------------------------+</echo>
				<fail>*** ERROR: Invalid version number. ***</fail>
			</else>
		</if>

	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    * ===================================================================== -->
	<target name="updateVersionNumber" depends="validateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>

				<echo message="${workspace.home}\@{project}" />

				<if>
					<available file="${workspace.home}\@{project}/META-INF" />
					<then>
						<replaceregexp match="${manifest.version.regex}" replace="${manifest.version.replace}" byline="true">
							<fileset dir="${workspace.home}\@{project}/META-INF" includes="MANIFEST.MF" />
						</replaceregexp>
					</then>
				</if>

				<if>
					<available file="${workspace.home}\@{project}/html" />
					<then>
						<replaceregexp match="${copyright.1.version.regex}" replace="${copyright.1.version.replace}" byline="true">
							<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
						</replaceregexp>
					</then>
				</if>

				<replaceregexp match="${feature.1.version.regex}" replace="${feature.1.version.replace}" flags="s" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
				</replaceregexp>

				<replaceregexp match="${feature.2.version.regex}" replace="${feature.2.version.replace}" flags="s" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
				</replaceregexp>

				<replaceregexp match="${site.1.version.regex}" replace="${site.1.version.replace}" flags="g" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
				</replaceregexp>

				<replaceregexp match="${site.2.version.regex}" replace="${site.2.version.replace}" flags="g" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
				</replaceregexp>

			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Updates stylesheet.css of the help projects.
    * ===================================================================== -->
	<target name="updateStylesheets">

		<echo message="Updating stylesheets ..."/>

		<for list="${build.help.projects}" delimiter="," param="project">
			<sequential>
				<copy file="${build.template.dir}/stylesheet.css" todir="${workspace.home}/@{project}/html" overwrite="true"/>
			</sequential>
		</for>
		
	</target>	

	<!--
    * =====================================================================
    *   Asks for FTP credentials: username and password.
    *   Property 'IBMi.ftp.user' is loaded from 'ftp.properties'.
    * ===================================================================== -->
	<target name="ftpCredentialsIBMi" unless="IBMi.ftp.password">

		<input message="Please enter FTP password:" addproperty="IBMi.ftp.password" defaultvalue="" />

	</target>

	<!--
    * =====================================================================
    *   Asks for FTP credentials: username and password.
    *   Properties 'sf.ftp.user' is loaded from 'ftp.properties'.
    * ===================================================================== -->
	<target name="ftpCredentialsSourceForge" unless="sf.ftp.password">

		<input message="Please enter the SourceForge FTP password:" addproperty="sf.ftp.password" defaultvalue="" />

	</target>

	<!--
    * =====================================================================
    *   Refreshs the projects listed in 'build.properties'.
    * ===================================================================== -->
	<target name="refreshProjects">

		<echo>Refereshing projects ...</echo>

		<for list="${build.projects}" delimiter="," param="project">
			<sequential>
				<eclipse.refreshLocal resource="@{project}" depth="infinite" />
				<echo>* @{project}</echo>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Nice to have but does not yet work.
    * ===================================================================== -->
	<target name="buildScript">

		<eclipse.buildScript elements="feature@biz.isphere.core" buildDirectory="C:/workspaces/rdp_070/workspace/iSphere Build/build/temp" outputUpdateJars="true" />

	</target>

</project>