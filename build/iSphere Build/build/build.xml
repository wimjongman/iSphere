<!--
 * =====================================================================
 *   This Ant script helps you preparing for building the iSphere
 *   update site. Before you can run the script, you need to copy
 *   'template_ftp.properties' to 'ftp.properties' and change the
 *   properties to meet your needs.
 *
 *   Here are the steps to create an iSphere update site:
 *
 *     - On the PC run the 'CheckNLSMessages' JUnit test to check
 *       for missing or obsolete message property entries.
 *
 *     - On the PC change version number in COPYRIGHT.RPGLE.
 *     - On the PC push changes of project 'iSphere' to the AS/400.
 *     - On the AS/400 compile and execute command BUILD.
 *     - On the PC update minimum server version number in iSpherePlugin.
 *
 *     - On the PC search java sources for missing copyright header.
 *       Menu: Search -> File -> (?s)\A((?!copyright).)*\Z
 *             Check: Regular expression
 *     - On the PC update document iSphere.doc.
 *     - On the PC print iSphere.doc to 'iSphere for WDSCi 7.0-RDi 8.0+.pdf'.
 *     - On the PC set version number (build.version) in build.properties.
 *       (version number is automatically updated in MANIFEST.MF, feature.xml 
 *        and plugin.xml by build target 'updateVersionNumber'.)
 *
 *   Repeat for RDi and WDSC:
 *     - On the PC run target 'download'.
 *     - On the PC run target 'build' using lauch for RDP or WDSC.
 *     - On the PC right click 'site.xml', 
 *       select 'PDE Tools' -> 'Build Site'.
 *     - On the PC run target 'createSourceForgeFiles'.
 *     - On the PC run target 'uploadSourceForgeFiles'.
 *     - Upload files to SourceForge.
 *     - Create SVN tag.
 *   Last step when all changes are committed to the repository and all the
 *   files are published at sourceforge.
 *     - Set the version number in MANIFEST.MF in project "iSphere Notifier"
 *       and commit the change to the repository. After this the iSphere users
 *       get notified of the new iSphere version.
 *
 * ===================================================================== -->
<project basedir="." default="build">

	<!-- Include Ant Contrib tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
	    <pathelement location="${basedir}/../lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- Load project names and new version number -->
	<property file="build.properties" />

	<!-- Load ftp user name and password -->
	<property file="ftp.properties" />

	<!-- Set local FTP download directory -->
	<property name="local.ftp.download.directory" location="${basedir}/temp-downloads" />
	<property name="local.savefile.name" value="ISPHERE" />
	<property name="local.savefile.directory" location="${basedir}/../../${build.project.isphere.core}/Server" />

	<!-- Set SourceForge FTP upload directories -->
	<property name="sf.ftp.dir.updatesite.site.rdi" value="/home/project-web/isphere/htdocs/eclipse/rdi8.0/" />
	<property name="sf.ftp.dir.updatesite.site.wdsc" value="/home/project-web/isphere/htdocs/eclipse/wdsci7.0/" />
	<property name="sf.ftp.dir.updatesite.files.rdi" value="/home/pfs/project/isphere/beta version/eclipse/rdi8.0" />
	<property name="sf.ftp.dir.updatesite.files.wdsc" value="/home/pfs/project/isphere/beta version/eclipse/wdsci7.0" />
	<property name="sf.ftp.dir.updatesite.zip.rdi" value="/home/pfs/project/isphere/beta version/" />
	<property name="sf.ftp.dir.updatesite.zip.wdsc" value="/home/pfs/project/isphere/beta version/" />
	
	<property name="sf.site.url.rdi" value="http://downloads.sourceforge.net/project/isphere/beta%20version/eclipse/rdi8.0/" />
	<property name="sf.site.url.wdsci" value="http://downloads.sourceforge.net/project/isphere/beta%20version/eclipse/wdsci7.0/" />
	
	<!-- Set workspace home directory -->
	<property name="workspace.home" location="${basedir}/../.." />
	
	<!-- Set regular expressions and replacement values -->
	<property name="manifest.version.regex" value="(Bundle-Version:\s)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)" />
	<property name="manifest.version.replace" value="\1${build.version}" />

	<property name="feature.1.version.regex" value="(&lt;feature.*version=&quot;)([1-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)(&quot;\s+provider-name.*?&gt;)" />
	<property name="feature.1.version.replace" value="\1${build.version}\3" />

	<property name="feature.2.version.regex" value="(&lt;import feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)(&quot;\s+match.*?&gt;)" />
	<property name="feature.2.version.replace" value="\1${build.version}\3" />

	<property name="site.1.version.regex" value="(&lt;feature.*_)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)(\.jar)" />
	<property name="site.1.version.replace" value="\1${build.version}\3" />

	<property name="site.2.version.regex" value="(&lt;feature.*version=&quot;)([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)(&quot;)" />
	<property name="site.2.version.replace" value="\1${build.version}\3" />

	<property name="copyright.1.version.regex" value="^(Version: )([0-9]+\.[0-9]+(?:\.[0-9]+)?(?:\.b[0-9]+)?)(.*)?" />
	<property name="copyright.1.version.replace" value="\1${build.version}\3" />
	
	<property name="site.xml.url.regex" value="(?:(&lt;site)(&gt;))" />
	<property name="site.xml.url.replace.rdi" value="\1 url=&quot;${sf.site.url.rdi}&quot;\2" />
	<property name="site.xml.url.replace.wdsci" value="\1 url=&quot;${sf.site.url.wdsci}&quot;\2" />

	<!-- Set zip file and directory names -->
	<property name="build.upload.dir" location="${workspace.home}/${build.project.name}/upload" />
	<property name="zip.base.directory" location="${workspace.home}/${build.updatesite}" />
	<property name="zip.file.name.rdi" value="iSphere for RDi 8.0+ (v${build.version} Update Site).zip" />
	<property name="zip.file.name.wdsc" value="iSphere for WDSCi 7.0 (v${build.version} Update Site).zip" />
	<property name="isphere.doc" location="${workspace.home}/${build.project.isphere.core}/doc/iSphere.doc" />
	<property name="isphere.pdf" location="${workspace.home}/${build.project.isphere.core}/doc/iSphere for WDSCi 7.0-RDi 8.0+.pdf" />
	<property name="updatesite.tag.file" location="${workspace.home}\${build.updatesite}\${build.updatesite} v${build.version}.tag" />

	<!--
    * =====================================================================
    *   Controls the build process:
    *     - update version number
    * ===================================================================== -->
	<target name="build" depends="cleanUpdateSite, updateVersionNumber, createTagFile, refreshProjects" description="build iSphere update site">
		<echo>Finished iSphere build ${build.version}</echo>
		<echo>Open site.xml and press [Build All] to build the iSphere update site.</echo>
		<echo>*** Finished ***</echo>
	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    * ===================================================================== -->
	<target name="updateVersionNumber">

		<echo>Updating version number to: ${build.version} ...</echo>

		<for list="${build.projects},${build.updatesite}" delimiter="," param="project">
			<sequential>

				<echo message="${workspace.home}\@{project}" />

				<if>
					<available file="${workspace.home}\@{project}/META-INF" />
					<then>
						<replaceregexp match="${manifest.version.regex}" replace="${manifest.version.replace}" byline="true">
							<fileset dir="${workspace.home}\@{project}/META-INF" includes="MANIFEST.MF" />
						</replaceregexp>
					</then>
				</if>

				<if>
					<available file="${workspace.home}\@{project}/html" />
					<then>
						<replaceregexp match="${copyright.1.version.regex}" replace="${copyright.1.version.replace}" byline="true">
							<fileset dir="${workspace.home}\@{project}/html" includes="copyright.html" />
						</replaceregexp>
					</then>
				</if>

				<replaceregexp match="${feature.1.version.regex}" replace="${feature.1.version.replace}" flags="s" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
				</replaceregexp>

				<replaceregexp match="${feature.2.version.regex}" replace="${feature.2.version.replace}" flags="s" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="feature.xml" />
				</replaceregexp>

				<replaceregexp match="${site.1.version.regex}" replace="${site.1.version.replace}" flags="g" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
				</replaceregexp>

				<replaceregexp match="${site.2.version.regex}" replace="${site.2.version.replace}" flags="g" byline="false">
					<fileset dir="${workspace.home}\@{project}" includes="site.xml" />
				</replaceregexp>

			</sequential>
		</for>

		<echo>Done.</echo>

	</target>


	<!--
    * =====================================================================
    *   Creating tag file to indicate the iSphere version
    *   inside the zip file.
    * ===================================================================== -->
	<target name="createTagFile">

		<echo>Creating version tag file ${updatesite.tag.file} ...</echo>

		<touch file="${updatesite.tag.file}" />

	</target>

	<!--
    * =====================================================================
    *   Downloads library ISPHERE from the System i.
    *   This target requires a patched version of commons-net-3.3.jar
    *   where bug NET-512 has been fixed.
    *   (https://issues.apache.org/jira/browse/NET-512)
    * ===================================================================== -->
	<target name="download" depends="ftpCredentialsIBMi" >

		<echo>Downloading save file ${IBMi.ftp.savefile.name} ...</echo>

		<ftp action="get"
			 server="${IBMi.ftp.server}"
		     userid="${IBMi.ftp.user}"
		     password="${IBMi.ftp.password}"
			 binary="true" 
		     verbose="true" 
			 remotedir="${IBMi.ftp.savefile.library}"
			 systemTypeKey="OS/400"
			 >
			<fileset dir="${local.ftp.download.directory}" casesensitive="false">
				<include name="${IBMi.ftp.savefile.name}" />
			</fileset>
		</ftp>

		<move file="${local.ftp.download.directory}/${IBMi.ftp.savefile.name}" tofile="${local.savefile.directory}/${local.savefile.name}" overwrite="true" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />
		<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />

	</target>

	<!--
    * =====================================================================
    *   Asks for FTP credentials: username and password.
    *   Property 'IBMi.ftp.user' is loaded from 'ftp.properties'.
    * ===================================================================== -->
	<target name="ftpCredentialsIBMi" unless="IBMi.ftp.password">

		<input
	    	message="Please enter FTP password:"
	    	addproperty="IBMi.ftp.password"
	    	defaultvalue="" />

	</target>

	<!--
    * =====================================================================
    *   Updates the version numbers of the following files:
    *     - MANIFEST.MF
    *     - feature.xml
    *     - site.xml
    * ===================================================================== -->
	<target name="refreshProjects">

		<echo>Refereshing projects ...</echo>

		<for list="${build.projects},${build.updatesite}" delimiter="," param="project">
			<sequential>
				<eclipse.refreshLocal resource="@{project}" depth="infinite" />
				<echo>* @{project}</echo>
			</sequential>
		</for>

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Removes all files from the following directories of the 
    *   update site project:
    *     - features
    *     - plugins
    * ===================================================================== -->
	<target name="cleanUpdateSite" >

		<echo>Removing old files from '${build.updatesite}' ...</echo>

		<delete includeemptydirs="true">
			<fileset dir="${workspace.home}\${build.updatesite}\features" includes="**/*" />
			<fileset dir="${workspace.home}\${build.updatesite}\plugins" includes="**/*" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="artifacts.jar" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="content.jar" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="*.tag" />
			<fileset dir="${workspace.home}\${build.updatesite}" includes="logs.zip" />
		</delete>

		<eclipse.refreshLocal resource="${build.updatesite}" depth="infinite" />

		<echo>Done.</echo>

	</target>

	<!--
    * =====================================================================
    *   Produces the files that must be uploaded to SourceForge:
    * ===================================================================== -->
	<target name="createSourceForgeFiles" depends="cleanUploadDir,checkPdfFile,updatePdfFile" description="create SourceForge files">

		<echo>Creating files to upload to SourceForge '${build.updatesite}' ...</echo>

		<if>
			<equals arg1="${build.target}" arg2="RDi" />
			<then>
				<property name="zip.file.name" value="${zip.file.name.rdi}" />
				<property name="sf.site.url" value="${sf.site.url.rdi}"/>
				<property name="site.xml.url.replace" value="${site.xml.url.replace.rdi}"/>
			</then>
			<else>
				<property name="zip.file.name" value="${zip.file.name.wdsc}" />
				<property name="sf.site.url" value="${sf.site.url.wdsci}"/>
				<property name="site.xml.url.replace" value="${site.xml.url.replace.wdsci}"/>
			</else>
		</if>

		<replaceregexp match="${site.xml.url.regex}" replace="${site.xml.url.replace}" byline="false">
			<fileset dir="${workspace.home}\${build.updatesite}" includes="site.xml" />
		</replaceregexp>

		<zip basedir="${zip.base.directory}" destfile="${build.upload.dir}\${zip.file.name}">
			<include name="**/*" />
			<exclude name="**/.project" />
		</zip>

		<copy file="${isphere.pdf}" todir="${build.upload.dir}" />

		<eclipse.refreshLocal resource="${build.project.name}" depth="infinite" />
		<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />

		<echo>Done.</echo>

	</target>
	
	<target name="cleanUploadDir" >
		
		<echo>Cleaning upload directory ...</echo>
		
		<delete includeemptydirs="true">
			<fileset dir="${workspace.home}\${build.project.name}\upload" includes="**/*" />
		</delete>
		
	</target>
	
	<target name="updatePdfFile" unless="pdf.isUpToDate">
		
		<echo>Updating iSphere PDF file ...</echo>
		
		<winword file="${isphere.doc}" visible="true" >
			<saveAs toFile="${isphere.pdf}" saveFormat="pdf" />
		</winword>
		
	</target>
	
	<target name="checkPdfFile" >
		<eclipse.refreshLocal resource="${build.project.isphere.core}" depth="infinite" />
		<uptodate property="pdf.isUpToDate" srcfile="${isphere.doc}" targetfile="${isphere.pdf}" />
		<echo>Check iSphere PDF result: ${pdf.isUpToDate}</echo>
	</target>

	<!--
    * =====================================================================
    *   Uploads the iSphere update site to SourceForge
    * ===================================================================== -->
	<target name="uploadSourceForgeFiles" depends="ftpCredentialsSourceForge" description="Uploads the project files to SourceForge">

		<echo>Uploading files to SourceForge ...</echo>

		<if>
			<equals arg1="${build.target}" arg2="RDi" />
			<then>
				<property name="sf.ftp.dir.updatesite.site" value="${sf.ftp.dir.updatesite.site.rdi}" />
				<property name="sf.ftp.dir.updatesite.files" value="${sf.ftp.dir.updatesite.files.rdi}"/>
				<property name="sf.ftp.dir.updatesite.zip" value="${sf.ftp.dir.updatesite.zip.rdi}"/>
			</then>
			<else>
				<property name="sf.ftp.dir.updatesite.site" value="${sf.ftp.dir.updatesite.site.wdsc}" />
				<property name="sf.ftp.dir.updatesite.files" value="${sf.ftp.dir.updatesite.files.wdsci}"/>
				<property name="sf.ftp.dir.updatesite.zip" value="${sf.ftp.dir.updatesite.zip.wdsci}"/>
			</else>
		</if>
		
		<!--
		<echo>Uploading: site.xml ...</echo>
		<scp sftp="true" trust="true" password="${sf.ftp.password}" 
			 todir="${sf.ftp.user},${sf.ftp.project}@${sf.ftp.server.web}:${sf.ftp.dir.updatesite.site}" >
			<fileset dir="${workspace.home}\${build.updatesite}\" >
				<include name="site.xml"/>
			</fileset>
		</scp>

		<echo>Uploading: update site jar files ...</echo>
		<scp sftp="true" trust="true" password="${sf.ftp.password}" 
			 todir="${sf.ftp.user},${sf.ftp.project}@${sf.ftp.server.files}:${sf.ftp.dir.updatesite.files}" >
			<fileset dir="${workspace.home}\${build.updatesite}\" >
				<include name="**/*.jar"/>
			</fileset>
		</scp>
		-->

		<echo>Uploading: zip files ...</echo>
		<scp sftp="true" trust="true" password="${sf.ftp.password}" 
			 todir="${sf.ftp.user},${sf.ftp.project}@${sf.ftp.server.files}:${sf.ftp.dir.updatesite.zip}" >
			<fileset dir="${build.upload.dir}\" >
				<include name="**/*.zip"/>
				<include name="**/*.pdf"/>
			</fileset>
		</scp>
		
	</target>

	<!--
    * =====================================================================
    *   Asks for FTP credentials: username and password.
    *   Properties 'sf.ftp.user' is loaded from 'ftp.properties'.
    * ===================================================================== -->
	<target name="ftpCredentialsSourceForge" unless="sf.ftp.password">

		<input
	    	message="Please enter the SourceForge FTP password:"
	    	addproperty="sf.ftp.password"
	    	defaultvalue="" />

	</target>
	
	<!--
    * =====================================================================
    *   Nice to have but does not yet work.
    * ===================================================================== -->
	<target name="buildScript">

		<eclipse.buildScript
	    	elements="feature@biz.isphere.core"
	    	buildDirectory="C:/workspaces/rdp_070/workspace/iSphere Build/build/temp" 
			outputUpdateJars="true" />

	</target>

</project>